{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\n\nconst API = async (url, abortSignal) => {\n  const response = await fetch(url, {\n    signal: abortSignal\n  });\n  return response.json();\n};\n\n_c = API;\nexport const useStateAPI = url => {\n  _s();\n\n  const [value, setState] = React.useState(null);\n  React.useEffect(() => {\n    // This is the abort controller that will cancel the fetch if the component was unmounted\n    const controller = new AbortController();\n    const signal = controller.signal;\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const data = await API(url, signal);\n        setState(data.graphql);\n      } catch (e) {\n        setState(null);\n      }\n    }; // it will fetch data only on mount so that\n\n\n    if (mounted) {\n      fetchData();\n    }\n\n    return () => {\n      mounted = false;\n      controller.abort();\n    };\n  }, [url]);\n  return value;\n};\n\n_s(useStateAPI, \"vanRIDBg1mgHG4Og84tOUhxJ0F4=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"API\");","map":{"version":3,"sources":["/home/winechan/React-boot-Project/socialMedia-miniapp/src/api.js"],"names":["React","API","url","abortSignal","response","fetch","signal","json","useStateAPI","value","setState","useState","useEffect","controller","AbortController","mounted","fetchData","data","graphql","e","abort"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAG,GAAG,OAAOC,GAAP,EAAYC,WAAZ,KAA4B;AACpC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAM;AAAEI,IAAAA,MAAM,EAAEH;AAAV,GAAN,CAA5B;AACA,SAAOC,QAAQ,CAACG,IAAT,EAAP;AACD,CAHH;;KAAMN,G;AAKN,OAAO,MAAMO,WAAW,GAAIN,GAAD,IAAS;AAAA;;AAChC,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBV,KAAK,CAACW,QAAN,CAAe,IAAf,CAA1B;AACAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB;AACA,UAAMC,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AACA,UAAMR,MAAM,GAAGO,UAAU,CAACP,MAA1B;AAEA,QAAIS,OAAO,GAAG,IAAd;;AAEA,UAAMC,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,IAAI,GAAG,MAAMhB,GAAG,CAACC,GAAD,EAAMI,MAAN,CAAtB;AACAI,QAAAA,QAAQ,CAACO,IAAI,CAACC,OAAN,CAAR;AACD,OAHD,CAGE,OAAOC,CAAP,EAAU;AACVT,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KAPD,CAPoB,CAepB;;;AACA,QAAIK,OAAJ,EAAa;AACXC,MAAAA,SAAS;AACV;;AAED,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,KAAV;AACAF,MAAAA,UAAU,CAACO,KAAX;AACD,KAHD;AAID,GAxBD,EAwBG,CAAClB,GAAD,CAxBH;AA0BA,SAAOO,KAAP;AACD,CA7BI;;GAAMD,W","sourcesContent":["import React from \"react\";\n\nconst API = async (url, abortSignal) => {\n    const response = await fetch(url, { signal: abortSignal });\n    return response.json();\n  };\n\nexport const useStateAPI = (url) => {\n    const [value, setState] = React.useState(null);\n    React.useEffect(() => {\n      // This is the abort controller that will cancel the fetch if the component was unmounted\n      const controller = new AbortController();\n      const signal = controller.signal;\n  \n      let mounted = true;\n  \n      const fetchData = async () => {\n        try {\n          const data = await API(url, signal);\n          setState(data.graphql);\n        } catch (e) {\n          setState(null);\n        }\n      };\n      // it will fetch data only on mount so that\n      if (mounted) {\n        fetchData();\n      }\n  \n      return () => {\n        mounted = false;\n        controller.abort();\n      };\n    }, [url]);\n  \n    return value;\n  };\n  "]},"metadata":{},"sourceType":"module"}