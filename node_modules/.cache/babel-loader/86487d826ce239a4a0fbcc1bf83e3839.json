{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from \"react\";\n\nconst API = async (url, abortSignal) => {\n  const response = await fetch(url, {\n    signal: abortSignal\n  });\n  return response.json();\n};\n\n_c = API;\nexport const useStateAPI = url => {\n  _s();\n\n  const [value, setValue] = React.useState({\n    name: '',\n    profile: '',\n    biography: '',\n    external_url: '',\n    follow_count: 0,\n    following_count: 0,\n    posts: [],\n    post_count: 0\n  });\n  React.useEffect(() => {\n    // This is the abort controller that will cancel the fetch if the component was unmounted\n    const controller = new AbortController();\n    const signal = controller.signal;\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const data = await API(url, signal);\n        setValue({\n          name: data.graphql.user.username,\n          profile: data.graphql.user.profile_pic_url,\n          biography: data.graphql.user.biography,\n          external_url: data.graphql.user.external_url,\n          follow_count: data.graphql.user.edge_followed_by.count,\n          following_count: data.graphql.user.edge_follow.count,\n          posts: data.graphql.user.edge_owner_to_timeline_media.edges,\n          post_count: data.graphql.user.edge_owner_to_timeline_media.count\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }; // it will fetch data only on mount so that\n\n\n    if (mounted) {\n      fetchData();\n    }\n\n    return () => {\n      mounted = false;\n      controller.abort();\n    };\n  }, [url]);\n  return value;\n}; //   Detail\n\n_s(useStateAPI, \"cqtFujTJeOcttLRblHzfy5C7sGE=\");\n\nexport const useDetailAPI = url => {\n  _s2();\n\n  const [value, setValue] = React.useState({\n    display_url: '',\n    profile: '',\n    username: '',\n    comment: [],\n    like_count: 0\n  });\n  React.useEffect(() => {\n    // This is the abort controller that will cancel the fetch if the component was unmounted\n    const controller = new AbortController();\n    const signal = controller.signal;\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const data = await API(url, signal);\n        setValue({\n          display_url: data.graphql.shortcode_media.display_url,\n          profile: data.graphql.shortcode_media.owner.profile_pic_url,\n          username: data.graphql.shortcode_media.owner.username,\n          comment: data.graphql.shortcode_media.edge_media_to_parent_comment.edges,\n          like_count: data.graphql.shortcode_media.edge_media_preview_like.count\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }; // it will fetch data only on mount so that\n\n\n    if (mounted) {\n      fetchData();\n    }\n\n    return () => {\n      mounted = false;\n      controller.abort();\n    };\n  }, [url]);\n  return value;\n};\n\n_s2(useDetailAPI, \"n4NjQ0pJSvwOoWNN0AfWeaxyuUg=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"API\");","map":{"version":3,"sources":["/home/winechan/React-boot-Project/socialMedia-miniapp/src/api.js"],"names":["React","API","url","abortSignal","response","fetch","signal","json","useStateAPI","value","setValue","useState","name","profile","biography","external_url","follow_count","following_count","posts","post_count","useEffect","controller","AbortController","mounted","fetchData","data","graphql","user","username","profile_pic_url","edge_followed_by","count","edge_follow","edge_owner_to_timeline_media","edges","e","console","log","abort","useDetailAPI","display_url","comment","like_count","shortcode_media","owner","edge_media_to_parent_comment","edge_media_preview_like"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nconst API = async (url, abortSignal) => {\n    const response = await fetch(url, { signal: abortSignal });\n    return response.json();\n  };\n\nexport const useStateAPI = (url) => {\n    const [value, setValue] = React.useState({\n      name:'',\n      profile:'',\n      biography:'',\n      external_url:'',\n      follow_count:0,\n      following_count:0,\n      posts:[],\n      post_count:0,\n    })\n    React.useEffect(() => {\n      // This is the abort controller that will cancel the fetch if the component was unmounted\n      const controller = new AbortController();\n      const signal = controller.signal;\n  \n      let mounted = true;\n  \n      const fetchData = async () => {\n        try {\n          const data = await API(url, signal);\n          setValue({\n            name : data.graphql.user.username,\n            profile : data.graphql.user.profile_pic_url,\n            biography : data.graphql.user.biography,\n            external_url : data.graphql.user.external_url,\n            follow_count : data.graphql.user.edge_followed_by.count,\n            following_count : data.graphql.user.edge_follow.count,\n            posts : data.graphql.user.edge_owner_to_timeline_media.edges,\n            post_count : data.graphql.user.edge_owner_to_timeline_media.count\n          })\n        \n        } catch (e) {\n            console.log(e)\n        }\n      };\n      // it will fetch data only on mount so that\n      if (mounted) {\n        fetchData();\n      }\n  \n      return () => {\n        mounted = false;\n        controller.abort();\n      };\n    }, [url]);\n\n    return value;\n  };\n\n\n//   Detail\n\n\nexport const useDetailAPI = (url) => {\n    const [value, setValue] = React.useState({\n       display_url:'',\n       profile:'',\n       username:'',\n       comment:[],\n       like_count:0\n    })\n    React.useEffect(() => {\n      // This is the abort controller that will cancel the fetch if the component was unmounted\n      const controller = new AbortController();\n      const signal = controller.signal;\n  \n      let mounted = true;\n  \n      const fetchData = async () => {\n        try {\n          const data = await API(url, signal);\n          setValue({\n            display_url: data.graphql.shortcode_media.display_url,\n            profile: data.graphql.shortcode_media.owner.profile_pic_url,\n            username: data.graphql.shortcode_media.owner.username,\n            comment: data.graphql.shortcode_media.edge_media_to_parent_comment.edges,\n            like_count: data.graphql.shortcode_media.edge_media_preview_like.count\n          })\n        \n        } catch (e) {\n            console.log(e)\n        }\n      };\n      // it will fetch data only on mount so that\n      if (mounted) {\n        fetchData();\n      }\n  \n      return () => {\n        mounted = false;\n        controller.abort();\n      };\n    }, [url]);\n\n    return value;\n  };\n  "]},"metadata":{},"sourceType":"module"}