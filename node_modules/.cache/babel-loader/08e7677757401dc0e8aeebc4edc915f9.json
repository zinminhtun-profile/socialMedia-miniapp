{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\n\nconst API = async (url, abortSignal) => {\n  const response = await fetch(url, {\n    signal: abortSignal\n  });\n  return response.json();\n};\n\n_c = API;\nexport const useStateAPI = url => {\n  _s();\n\n  const [value, setValue] = React.useState({}); // const [name, setName] = React.useState(null);\n  // const [profile, setProfile] = React.useState(null);\n  // const [biography, setBiography] = React.useState(null);\n  // const [external_url, setExternal_url] = React.useState(null);\n\n  React.useEffect(() => {\n    // This is the abort controller that will cancel the fetch if the component was unmounted\n    const controller = new AbortController();\n    const signal = controller.signal;\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const data = await API(url, signal);\n        setValue({\n          name: data.graphql.user.username,\n          profile: data.graphql.user.profile_pic_url,\n          biography: data.graphql.user.biography,\n          external_url: data.graphql.user.external_url\n        }); //   setName(data.graphql.user.username);\n        //   setProfile(data.graphql.user.profile_pic_url);\n        //   setBiography(data.graphql.user.biography);\n        //   setExternal_url(data.graphql.user.external_url);\n      } catch (e) {\n        console.log(e);\n      }\n    }; // it will fetch data only on mount so that\n\n\n    if (mounted) {\n      fetchData();\n    }\n\n    return () => {\n      mounted = false;\n      controller.abort();\n    };\n  }, [url]); // const userData = {\n  //     name,\n  //     profile,\n  //     biography,\n  //     external_url    \n  // }\n\n  return value;\n};\n\n_s(useStateAPI, \"4CysSj7Js+QL0/Jqy5LPceapPCY=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"API\");","map":{"version":3,"sources":["/home/winechan/React-boot-Project/socialMedia-miniapp/src/api.js"],"names":["React","API","url","abortSignal","response","fetch","signal","json","useStateAPI","value","setValue","useState","useEffect","controller","AbortController","mounted","fetchData","data","name","graphql","user","username","profile","profile_pic_url","biography","external_url","e","console","log","abort"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAG,GAAG,OAAOC,GAAP,EAAYC,WAAZ,KAA4B;AACpC,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAD,EAAM;AAAEI,IAAAA,MAAM,EAAEH;AAAV,GAAN,CAA5B;AACA,SAAOC,QAAQ,CAACG,IAAT,EAAP;AACD,CAHH;;KAAMN,G;AAKN,OAAO,MAAMO,WAAW,GAAIN,GAAD,IAAS;AAAA;;AAChC,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBV,KAAK,CAACW,QAAN,CAAe,EAAf,CAA1B,CADgC,CAEhC;AACA;AACA;AACA;;AACAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpB;AACA,UAAMC,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AACA,UAAMR,MAAM,GAAGO,UAAU,CAACP,MAA1B;AAEA,QAAIS,OAAO,GAAG,IAAd;;AAEA,UAAMC,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,IAAI,GAAG,MAAMhB,GAAG,CAACC,GAAD,EAAMI,MAAN,CAAtB;AACAI,QAAAA,QAAQ,CAAC;AACPQ,UAAAA,IAAI,EAAGD,IAAI,CAACE,OAAL,CAAaC,IAAb,CAAkBC,QADlB;AAEPC,UAAAA,OAAO,EAAGL,IAAI,CAACE,OAAL,CAAaC,IAAb,CAAkBG,eAFrB;AAGPC,UAAAA,SAAS,EAAGP,IAAI,CAACE,OAAL,CAAaC,IAAb,CAAkBI,SAHvB;AAIPC,UAAAA,YAAY,EAAGR,IAAI,CAACE,OAAL,CAAaC,IAAb,CAAkBK;AAJ1B,SAAD,CAAR,CAFE,CAQJ;AACA;AACA;AACA;AACC,OAZD,CAYE,OAAOC,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACF,KAhBD,CAPoB,CAwBpB;;;AACA,QAAIX,OAAJ,EAAa;AACXC,MAAAA,SAAS;AACV;;AAED,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,KAAV;AACAF,MAAAA,UAAU,CAACgB,KAAX;AACD,KAHD;AAID,GAjCD,EAiCG,CAAC3B,GAAD,CAjCH,EANgC,CA0ChC;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAOO,KAAP;AACD,CAlDI;;GAAMD,W","sourcesContent":["import React from \"react\";\n\nconst API = async (url, abortSignal) => {\n    const response = await fetch(url, { signal: abortSignal });\n    return response.json();\n  };\n\nexport const useStateAPI = (url) => {\n    const [value, setValue] = React.useState({})\n    // const [name, setName] = React.useState(null);\n    // const [profile, setProfile] = React.useState(null);\n    // const [biography, setBiography] = React.useState(null);\n    // const [external_url, setExternal_url] = React.useState(null);\n    React.useEffect(() => {\n      // This is the abort controller that will cancel the fetch if the component was unmounted\n      const controller = new AbortController();\n      const signal = controller.signal;\n  \n      let mounted = true;\n  \n      const fetchData = async () => {\n        try {\n          const data = await API(url, signal);\n          setValue({\n            name : data.graphql.user.username,\n            profile : data.graphql.user.profile_pic_url,\n            biography : data.graphql.user.biography,\n            external_url : data.graphql.user.external_url\n          })\n        //   setName(data.graphql.user.username);\n        //   setProfile(data.graphql.user.profile_pic_url);\n        //   setBiography(data.graphql.user.biography);\n        //   setExternal_url(data.graphql.user.external_url);\n        } catch (e) {\n            console.log(e)\n        }\n      };\n      // it will fetch data only on mount so that\n      if (mounted) {\n        fetchData();\n      }\n  \n      return () => {\n        mounted = false;\n        controller.abort();\n      };\n    }, [url]);\n\n\n    // const userData = {\n    //     name,\n    //     profile,\n    //     biography,\n    //     external_url    \n    // }\n  \n    return value;\n  };\n  "]},"metadata":{},"sourceType":"module"}