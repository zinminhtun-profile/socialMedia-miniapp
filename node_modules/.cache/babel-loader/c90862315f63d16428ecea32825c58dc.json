{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\n\nconst API = async url => {\n  const response = await fetch(url);\n  return response.json();\n};\n\n_c = API;\nexport const useStateAPI = url => {\n  _s();\n\n  const [value, setValue] = React.useState(null);\n  React.useEffect(() => {\n    // This is the abort controller that will cancel the fetch if the component was unmounted\n    //   const controller = new AbortController();\n    //   const signal = controller.signal;\n    let mounted = true;\n\n    const fetchData = async () => {\n      try {\n        const data = await API(url);\n        setValue({\n          name: data.graphql.user.username,\n          profile: data.graphql.user.profile_pic_url,\n          biography: data.graphql.user.biography,\n          external_url: data.graphql.user.external_url,\n          follow_count: data.graphql.user.edge_followed_by.count,\n          following_count: data.graphql.user.edge_follow.count,\n          posts: data.graphql.user.edge_owner_to_timeline_media.edges\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    }; // it will fetch data only on mount so that\n\n\n    if (mounted) {\n      fetchData();\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [url]);\n  return value;\n};\n\n_s(useStateAPI, \"QNA6AqGJKsyY0NGOv8Nup0fReMk=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"API\");","map":{"version":3,"sources":["/home/winechan/React-boot-Project/socialMedia-miniapp/src/api.js"],"names":["React","API","url","response","fetch","json","useStateAPI","value","setValue","useState","useEffect","mounted","fetchData","data","name","graphql","user","username","profile","profile_pic_url","biography","external_url","follow_count","edge_followed_by","count","following_count","edge_follow","posts","edge_owner_to_timeline_media","edges","e","console","log"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,GAAG,GAAG,MAAOC,GAAP,IAAe;AACvB,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAD,CAA5B;AACA,SAAOC,QAAQ,CAACE,IAAT,EAAP;AACD,CAHH;;KAAMJ,G;AAKN,OAAO,MAAMK,WAAW,GAAIJ,GAAD,IAAS;AAAA;;AAChC,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBR,KAAK,CAACS,QAAN,CAAe,IAAf,CAA1B;AACAT,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB;AACF;AACA;AAEE,QAAIC,OAAO,GAAG,IAAd;;AAEA,UAAMC,SAAS,GAAG,YAAY;AAC5B,UAAI;AACF,cAAMC,IAAI,GAAG,MAAMZ,GAAG,CAACC,GAAD,CAAtB;AACAM,QAAAA,QAAQ,CAAC;AACPM,UAAAA,IAAI,EAAGD,IAAI,CAACE,OAAL,CAAaC,IAAb,CAAkBC,QADlB;AAEPC,UAAAA,OAAO,EAAGL,IAAI,CAACE,OAAL,CAAaC,IAAb,CAAkBG,eAFrB;AAGPC,UAAAA,SAAS,EAAGP,IAAI,CAACE,OAAL,CAAaC,IAAb,CAAkBI,SAHvB;AAIPC,UAAAA,YAAY,EAAGR,IAAI,CAACE,OAAL,CAAaC,IAAb,CAAkBK,YAJ1B;AAKPC,UAAAA,YAAY,EAAGT,IAAI,CAACE,OAAL,CAAaC,IAAb,CAAkBO,gBAAlB,CAAmCC,KAL3C;AAMPC,UAAAA,eAAe,EAAGZ,IAAI,CAACE,OAAL,CAAaC,IAAb,CAAkBU,WAAlB,CAA8BF,KANzC;AAOPG,UAAAA,KAAK,EAAGd,IAAI,CAACE,OAAL,CAAaC,IAAb,CAAkBY,4BAAlB,CAA+CC;AAPhD,SAAD,CAAR;AAUD,OAZD,CAYE,OAAOC,CAAP,EAAU;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACF,KAhBD,CAPoB,CAwBpB;;;AACA,QAAInB,OAAJ,EAAa;AACXC,MAAAA,SAAS;AACV;;AAED,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,KAAV;AACD,KAFD;AAGD,GAhCD,EAgCG,CAACT,GAAD,CAhCH;AAkCA,SAAOK,KAAP;AACD,CArCI;;GAAMD,W","sourcesContent":["import React from \"react\";\n\nconst API = async (url) => {\n    const response = await fetch(url);\n    return response.json();\n  };\n\nexport const useStateAPI = (url) => {\n    const [value, setValue] = React.useState(null)\n    React.useEffect(() => {\n      // This is the abort controller that will cancel the fetch if the component was unmounted\n    //   const controller = new AbortController();\n    //   const signal = controller.signal;\n  \n      let mounted = true;\n  \n      const fetchData = async () => {\n        try {\n          const data = await API(url);\n          setValue({\n            name : data.graphql.user.username,\n            profile : data.graphql.user.profile_pic_url,\n            biography : data.graphql.user.biography,\n            external_url : data.graphql.user.external_url,\n            follow_count : data.graphql.user.edge_followed_by.count,\n            following_count : data.graphql.user.edge_follow.count,\n            posts : data.graphql.user.edge_owner_to_timeline_media.edges\n          })\n        \n        } catch (e) {\n            console.log(e)\n        }\n      };\n      // it will fetch data only on mount so that\n      if (mounted) {\n        fetchData();\n      }\n  \n      return () => {\n        mounted = false;\n      };\n    }, [url]);\n\n    return value;\n  };\n  "]},"metadata":{},"sourceType":"module"}